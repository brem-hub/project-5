#pragma once

#include "context.h"
#include <csignal>

/*
 * Класс signal_handler позволяет закрыть необходимые контексты при получении сигнала SIGINT.
 * Т.к. в ТЗ нет условия окончания работы, то для того, чтобы завершить работу не аварийно,
 *  необходимо послать в процесс сигнал SIGINT. В консоли Unix систем для этого подойдет комбинация
 *  клавиш Ctrl + C.
 * Так же можно послать сигнал SIGINT с помощью `kill -SIGINT pid_процесса`
 * Класс является статическим, что означает, что контекст будет закрыт глобально
 *  и только один контекст можно повесить на обработчика сигнала.
 */
class signal_handler {
 public:
  /*
   * Добавить контекст в обработчика сигнала.
   * Чтобы перезаписать контекст, необходимо вызвать данный метод с новым контекстом.
   * @param: ctx - контекст, который необходимо повесить на обработчика.
   */
  void static handle(context* ctx) {
      ctx_ = ctx;
      signal(SIGINT, &signal_handler::sig_handler);
  }

 private:
  /*
   * Обработчик прерывания.
   */
  void static sig_handler(int sig) {
      if (sig == SIGINT && ctx_) {
              ctx_->cancel();
      }
  }

 private:
  // контекст, который будет закрыт при возникновении прерывания.
  static context* ctx_;
};

context* signal_handler::ctx_ = nullptr;